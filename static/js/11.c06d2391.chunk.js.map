{"version":3,"sources":["forms/ContractorDataForm/index.jsx"],"names":["INITIAL_STATE","createFormState","address","createFormField","shouldRender","state","cityzenship","value","shouldValidate","validations","Validations","required","name","patronymic","surname","ContractorDataForm","useFormState","actions","handleBlur","isValidated","validateState","handleChange","field","changeField","useEffect","autoComplete","onSubmit","e","preventDefault","isValid","alert","size","error","getOptionsMethod","getSurnames","label","onBlur","onChange","getNames","getPatronymics","options","id","getAddresses","variant"],"mappings":"4NA2BMA,EAAgBC,0BAAgB,CACpCC,QAASC,0BAAgB,CACvBC,aAAc,SAACC,GAAD,OAAuC,IAA5BA,EAAMC,YAAYC,OAC3CC,eAAgB,SAACH,GAAD,OAAuC,IAA5BA,EAAMC,YAAYC,OAC7CE,YAAa,CAACC,cAAYC,YAE5BL,YAAaH,0BAAgB,CAC3BM,YAAa,CAACC,cAAYC,YAE5BC,KAAMT,0BAAgB,CACpBM,YAAa,CAACC,cAAYC,YAE5BE,WAAYV,4BACZW,QAASX,0BAAgB,CACvBM,YAAa,CAACC,cAAYC,cAqIfI,UAjIf,WACE,MAAyBC,uBAAahB,GAAtC,mBAAOK,EAAP,KAAcY,EAAd,KAUA,SAASC,IACHb,EAAMc,aACRF,EAAQG,cAAcf,GAG1B,SAASgB,EAAad,EAAtB,GAA+C,IAAVe,EAAS,EAAfV,KAC7BK,EAAQM,YAAYD,EAAOf,GAU7B,OAvBAiB,qBAAU,WACJnB,EAAMc,aACRF,EAAQG,cAAcf,KAEvB,CAACA,EAAMC,YAAYC,QAoBpB,cAAC,oBAAD,CAAmBF,MAAOA,EAA1B,SACE,uBAAMoB,aAAa,MAAMC,SAV7B,SAAsBC,GACpBA,EAAEC,iBACqBX,EAAQG,cAAcf,GAC1BwB,WACjBC,MAAM,wBAMN,UACE,cAAC,IAAD,CAAGC,KAAK,IAAR,8IACA,eAAC,IAAD,WACE,cAAC,YAAD,CAAWT,MAAOjB,EAAMS,QAAxB,SACG,SAACP,EAAD,OAAUyB,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEA,MAAOA,EACPC,iBAAkBC,IAClBC,MAAM,+CACNvB,KAAK,UACLL,MAAOA,EACP6B,OAAQlB,EACRmB,SAAUhB,WAMpB,cAAC,YAAD,CAAWC,MAAOjB,EAAMO,KAAxB,SACG,SAACL,EAAD,OAAUyB,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEA,MAAOA,EACPC,iBAAkBK,IAClBH,MAAM,uBACNvB,KAAK,OACLL,MAAOA,EACP6B,OAAQlB,EACRmB,SAAUhB,WAMpB,cAAC,YAAD,CAAWC,MAAOjB,EAAMQ,WAAxB,SACG,SAACN,EAAD,OAAUyB,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEA,MAAOA,EACPC,iBAAkBM,IAClBJ,MAAM,mDACNvB,KAAK,aACLL,MAAOA,EACP6B,OAAQlB,EACRmB,SAAUhB,WAMpB,cAAC,YAAD,CAAWC,MAAOjB,EAAMC,YAAxB,SACG,SAACC,EAAD,OAAUyB,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEA,MAAOA,EACPG,MAAM,uEACNvB,KAAK,cACL4B,QAAS,CACP,CAAEC,GAAI,EAAG7B,KAAM,mFACf,CAAE6B,GAAI,EAAG7B,KAAM,8HAEjBL,MAAOA,EACP8B,SAAUhB,cAOtB,cAAC,YAAD,CAAWC,MAAOjB,EAAMH,QAAxB,SACG,SAACK,EAAD,OAAUyB,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,UACE,cAAC,IAAD,CACEA,MAAOA,EACPC,iBAAkBS,IAClBP,MAAM,sGACNvB,KAAK,UACLL,MAAOA,EACP6B,OAAQlB,EACRmB,SAAUhB,SAKlB,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQsB,QAAQ,UAAhB","file":"static/js/11.c06d2391.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\nimport {\n  createFormField,\n  createFormState,\n  FormField,\n  FormStateProvider,\n  useFormState,\n  Validations,\n} from '@balance-pl/form-state'\n\n// API\nimport {\n  getAddresses,\n  getNames,\n  getPatronymics,\n  getSurnames,\n} from '../../api/dadata'\n\n// Components\nimport Button from '../../components/Button'\nimport FormRow from '../../components/FormRow'\nimport { Col, Row } from '../../components/Grid'\nimport H from '../../components/H'\nimport InputSuggest from '../../components/InputSuggest'\nimport SelectBox from '../../components/SelectBox'\n\nconst INITIAL_STATE = createFormState({\n  address: createFormField({\n    shouldRender: (state) => state.cityzenship.value === 2,\n    shouldValidate: (state) => state.cityzenship.value === 2,\n    validations: [Validations.required],\n  }),\n  cityzenship: createFormField({\n    validations: [Validations.required],\n  }),\n  name: createFormField({\n    validations: [Validations.required],\n  }),\n  patronymic: createFormField(),\n  surname: createFormField({\n    validations: [Validations.required],\n  }),\n})\n\nfunction ContractorDataForm() {\n  const [state, actions] = useFormState(INITIAL_STATE)\n\n  // Effects\n  useEffect(() => {\n    if (state.isValidated) {\n      actions.validateState(state)\n    }\n  }, [state.cityzenship.value])\n\n  // Handlers\n  function handleBlur() {\n    if (state.isValidated) {\n      actions.validateState(state)\n    }\n  }\n  function handleChange(value, { name: field }) {\n    actions.changeField(field, value)\n  }\n  function handleSubmit(e) {\n    e.preventDefault()\n    const validatedState = actions.validateState(state)\n    if (validatedState.isValid()) {\n      alert('Sending the form...')\n    }\n  }\n\n  return (\n    <FormStateProvider state={state}>\n      <form autoComplete=\"off\" onSubmit={handleSubmit}>\n        <H size=\"1\">Информация о сотруднике</H>\n        <Row>\n          <FormField field={state.surname}>\n            {(value, { error }) => (\n              <Col>\n                <FormRow>\n                  <InputSuggest\n                    error={error}\n                    getOptionsMethod={getSurnames}\n                    label=\"Фамилия *\"\n                    name=\"surname\"\n                    value={value}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                </FormRow>\n              </Col>\n            )}\n          </FormField>\n          <FormField field={state.name}>\n            {(value, { error }) => (\n              <Col>\n                <FormRow>\n                  <InputSuggest\n                    error={error}\n                    getOptionsMethod={getNames}\n                    label=\"Имя *\"\n                    name=\"name\"\n                    value={value}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                </FormRow>\n              </Col>\n            )}\n          </FormField>\n          <FormField field={state.patronymic}>\n            {(value, { error }) => (\n              <Col>\n                <FormRow>\n                  <InputSuggest\n                    error={error}\n                    getOptionsMethod={getPatronymics}\n                    label=\"Отчество\"\n                    name=\"patronymic\"\n                    value={value}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                </FormRow>\n              </Col>\n            )}\n          </FormField>\n          <FormField field={state.cityzenship}>\n            {(value, { error }) => (\n              <Col>\n                <FormRow>\n                  <SelectBox\n                    error={error}\n                    label=\"Гражданство *\"\n                    name=\"cityzenship\"\n                    options={[\n                      { id: 1, name: 'Гражданство РФ' },\n                      { id: 2, name: 'Иностранный гражданин' },\n                    ]}\n                    value={value}\n                    onChange={handleChange}\n                  />\n                </FormRow>\n              </Col>\n            )}\n          </FormField>\n        </Row>\n        <FormField field={state.address}>\n          {(value, { error }) => (\n            <FormRow>\n              <InputSuggest\n                error={error}\n                getOptionsMethod={getAddresses}\n                label=\"Адрес регистрации *\"\n                name=\"address\"\n                value={value}\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n            </FormRow>\n          )}\n        </FormField>\n        <Row>\n          <Col />\n          <Col>\n            <Button variant=\"primary\">Отправить на анализ</Button>\n          </Col>\n        </Row>\n      </form>\n    </FormStateProvider>\n  )\n}\n\nexport default ContractorDataForm\n"],"sourceRoot":""}